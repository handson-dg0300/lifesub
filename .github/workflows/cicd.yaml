name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: |
          ./gradlew :member:build :mysub-infra:build :recommend:build -x test

      - name: Run Tests
        run: |
          ./gradlew :member:test :mysub-infra:test :recommend:test

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: SonarQube Analysis for Member Service
        run: |
          ./gradlew :member:jacocoTestReport :member:sonar \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.projectKey=lifesub-member-${{ env.TEAM_ID }} \
            -Dsonar.projectName=lifesub-member-${{ env.TEAM_ID }} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
        env:
          TEAM_ID: ${{ github.repository_owner }}

      - name: SonarQube Analysis for Mysub Service
        run: |
          ./gradlew :mysub-infra:jacocoTestReport :mysub-infra:sonar \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.projectKey=lifesub-mysub-${{ env.TEAM_ID }} \
            -Dsonar.projectName=lifesub-mysub-${{ env.TEAM_ID }} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
        env:
          TEAM_ID: ${{ github.repository_owner }}

      - name: SonarQube Analysis for Recommend Service
        run: |
          ./gradlew :recommend:jacocoTestReport :recommend:sonar \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.projectKey=lifesub-recommend-${{ env.TEAM_ID }} \
            -Dsonar.projectName=lifesub-recommend-${{ env.TEAM_ID }} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
        env:
          TEAM_ID: ${{ github.repository_owner }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-artifacts
          path: |
            member/build/libs
            mysub-infra/build/libs
            recommend/build/libs
          retention-days: 1

  release:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: build
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read environment variables
        run: |
          # Read variables from deploy_env_vars
          source <(grep -v '^#' deployment/deploy_env_vars | sed 's/^/export /')
          echo "REGISTRY=$registry" >> $GITHUB_ENV
          echo "IMAGE_ORG=$image_org" >> $GITHUB_ENV
          echo "TEAM_ID=$teamid" >> $GITHUB_ENV
          echo "ROOT_PROJECT=$root_project" >> $GITHUB_ENV
          echo "NAMESPACE=$namespace" >> $GITHUB_ENV

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build-artifacts

      - name: Set Image Tag
        id: set_image_tag
        run: |
          IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Member Service Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployment/container/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/member:${{ env.IMAGE_TAG }}
          build-args: |
            BUILD_LIB_DIR=member/build/libs
            ARTIFACTORY_FILE=member.jar

      - name: Build and Push Mysub Service Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployment/container/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/mysub:${{ env.IMAGE_TAG }}
          build-args: |
            BUILD_LIB_DIR=mysub-infra/build/libs
            ARTIFACTORY_FILE=mysub.jar

      - name: Build and Push Recommend Service Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployment/container/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/recommend:${{ env.IMAGE_TAG }}
          build-args: |
            BUILD_LIB_DIR=recommend/build/libs
            ARTIFACTORY_FILE=recommend.jar

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read environment variables
        run: |
          # Read variables from deploy_env_vars
          source <(grep -v '^#' deployment/deploy_env_vars | sed 's/^/export /')
          echo "NAMESPACE=$namespace" >> $GITHUB_ENV
          echo "ALLOWED_ORIGINS=$allowed_origins" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=$jwt_secret_key" >> $GITHUB_ENV
          echo "POSTGRES_USER=$postgres_user" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=$postgres_password" >> $GITHUB_ENV
          echo "REPLICAS=$replicas" >> $GITHUB_ENV
          echo "RESOURCES_REQUESTS_CPU=$resources_requests_cpu" >> $GITHUB_ENV
          echo "RESOURCES_REQUESTS_MEMORY=$resources_requests_memory" >> $GITHUB_ENV
          echo "RESOURCES_LIMITS_CPU=$resources_limits_cpu" >> $GITHUB_ENV
          echo "RESOURCES_LIMITS_MEMORY=$resources_limits_memory" >> $GITHUB_ENV
          echo "INGRESS_HOST=$ingress_host" >> $GITHUB_ENV
          echo "REGISTRY=$registry" >> $GITHUB_ENV
          echo "IMAGE_ORG=$image_org" >> $GITHUB_ENV

      - name: Set image paths with image tag
        run: |
          echo "MEMBER_IMAGE_PATH=${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/member:${{ needs.release.outputs.image_tag }}" >> $GITHUB_ENV
          echo "MYSUB_IMAGE_PATH=${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/mysub:${{ needs.release.outputs.image_tag }}" >> $GITHUB_ENV
          echo "RECOMMEND_IMAGE_PATH=${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/recommend:${{ needs.release.outputs.image_tag }}" >> $GITHUB_ENV

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group rg-digitalgarage-01 --name aks-digitalgarage-01 --overwrite-existing

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Kubernetes manifests
        run: |
          mkdir -p deployment/k8s
          
          # Replace variables in the template
          envsubst < deployment/deploy.yaml.template > deployment/k8s/deploy.yaml
          
          # Debug: Output the generated manifest
          echo "Generated manifest file:"
          cat deployment/k8s/deploy.yaml

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployment/k8s/deploy.yaml
          
          echo "Waiting for deployments to be ready..."
          kubectl -n ${{ env.NAMESPACE }} wait --for=condition=available deployment/member --timeout=300s
          kubectl -n ${{ env.NAMESPACE }} wait --for=condition=available deployment/mysub --timeout=300s
          kubectl -n ${{ env.NAMESPACE }} wait --for=condition=available deployment/recommend --timeout=300s
          
          echo "Backend services deployed successfully!"